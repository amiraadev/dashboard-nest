// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// model User {
//   id             String   @id @default(uuid())
//   firstName      String
//   lastName       String
//   email          String   @unique
//   hashedPassword String?
//   hashedRefToken String   @default("")
//   picturePath    String?
//   location       String?
//   occupation     String?
//   viewedProfile  Int      @default(0)
//   impressions    Int      @default(0)
//   createdAt      DateTime @default(now())
//   updatedAt      DateTime @updatedAt

//   friends  Friend[]
//   posts    Post[]
//   Likes    Like[]
//   Comments Comment[]
//   picture  Image?    @relation(fields: [picturePath], references: [path])

//   @@unique([firstName, lastName])
// }

model User {
  id             String   @id @default(uuid())
  firstName      String
  lastName       String
  email          String   @unique
  hashedPassword String?
  hashedRefToken String   @default("")
  picturePath    String?
  location       String?
  occupation     String?
  viewedProfile  Int      @default(0)
  impressions    Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  picture        Image?   @relation(fields: [picturePath], references: [path])

  followedBy User[] @relation("UserFollows")
  following  User[] @relation("UserFollows")

  posts    Post[]
  likes    Post[]    @relation(name: "UserLikes")
  Comments Comment[]
  Friend   Friend[]
}

model Friend {
  id          String  @id @default(uuid())
  friendId    String
  userId      String
  firstName   String
  lastName    String
  picturePath String?
  occupation  String?
  location    String?

  user  User   @relation(fields: [userId], references: [id])
  Image Image? @relation(fields: [picturePath], references: [path])

  @@unique([friendId, userId])
}

model Post {
  id              String  @id @default(uuid())
  userId          String
  title           String
  description     String
  location        String?
  userpicturePath String?
  picturePath     String?

  likedBy   User[]   @relation(name: "UserLikes") 
  Comments Comment[]
  user User @relation(fields: [userId], references: [id])

  postPictures    Image[] @relation("postPicture")
  PostUserPicture Image?  @relation("picturePath", fields: [picturePath], references: [path])
}



model Image {
  id     String   @id @default(uuid())
  path   String   @unique
  postId String?
  userId String?
  Friend Friend[]
  User   User[]

  // Post  Post?  @relation("postPicture", fields: [postId], references: [id])
  // posts Post[] @relation("picturePath")

  postsOfThisPicture     Post[] @relation("postPicture")
  postsOfThisUserPicture Post[] @relation("picturePath")

  // postsOfThisUserPicture     Post[] @relation("postPicture")
  // postsOfThisPicture Post[] @relation("picturePath")
}

model Comment {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  content   String
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])
}
